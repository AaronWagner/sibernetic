{"name":"Sibernetic","tagline":"This is a C++ implementation of the Contractile SPH (Electrofluid) algorithm applied to C. elegans locomotion","body":"![Sibernetic](http://i.imgur.com/Hbsw6Zs.png)\r\n\r\nThis is a C++ implementation of the Contractile SPH (Electrofluid) algorithm applied to C. elegans locomotion. Electrofluid is a modification of the [Smoothed Particle Hydrodynamics](http://en.wikipedia.org/wiki/Smoothed-particle_hydrodynamics) developed for the [OpenWorm](http://openworm.org) project by Andrey Palyanov, Sergey Khayrulin and Mike Vella.\r\n\r\nThere is a separate effort lead by [Giovanni Idili](https://github.com/gidili) and [Sergey Khayrulin](https://github.com/skhayrulin) to port this code to Java, as part of the [Geppetto simulation framework](https://github.com/openworm/OpenWorm/wiki/Geppetto--Overview). \r\n\r\nCompiling / running (Linux/mac)\r\n------------------------------\r\n\r\n**Linux**: navigate to the `Release` folder and run:\r\n\r\n```\r\nmake clean\r\nmake all\r\n```\r\n\r\n**Mac**: stay in the top-level folder and run:\r\n\r\n```\r\nmake clean -f makefile.OSX\r\nmake all -f makefile.OSX\r\n```\r\n\r\nYou should see an output which looks something like this:\r\n\r\n```\r\nBuilding file: ../src/PyramidalSimulation.cpp\r\nInvoking: GCC C++ Compiler\r\n\r\n....\r\nmore stuff...\r\n....\r\n\r\nBuilding target: Smoothed-Particle-Hydrodynamics\r\nInvoking: GCC C++ Linker\r\ng++ -L/usr/lib -L/usr/lib/python2.7 -o \"Smoothed-Particle-Hydrodynamics\"  ./src/PyramidalSimulation.o ./src/main.o ./src/owHelper.o ./src/owOpenCLSolver.o ./src/owPhysicsFluidSimulator.o ./src/owWorldSimulation.o   -lOpenCL -lpython2.7 -lrt -lglut -lGL -lGLU\r\nFinished building target: Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nThen navigate to the top-level folder in the hierarchy (e.g `Smoothed-Particle-Hydrodynamics`) and set your `PYTHONPATH`:\r\n\r\n```\r\nexport PYTHONPATH=$PYTHONPATH:'./src'\r\n```\r\n\r\nFinally, to run, run the command:\r\n\r\n**Linux**:\r\n```\r\n./Release/Smoothed-Particle-Hydrodynamics\r\n```\r\n**Mac**:\r\n```\r\n./build/Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nYou may need to make `./Release/Smoothed-Particle-Hydrodynamics` executable like so:\r\n\r\n```\r\nchmod +x ./Release/Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nIf you do not run from the top-level folder you will see an error which looks something like this:\r\n\r\n```\r\nCompilation failed: \r\n\"/tmp/OCLQ1BaOw.cl\", line 8: catastrophic error: cannot open source file\r\n\"src//owOpenCLConstant.h\"\r\n#include \"src//owOpenCLConstant.h\"\r\n```\r\n\r\nSaving to disk\r\n--------------\r\n\r\nYou may wish to save simulations to disk rather than visualise them (**WARNING**: This is buggy)\r\n\r\nFor record configuraton into file you need to run simulation with key -l_to - it create 3 new files \r\nat the folder ./buffers:\r\n- connection_buffers.txt - it need to store information about conection among of elastic partciles\r\n- membranes_buffer.txt   - it need to store information about membranes \r\n- position_buffer.txt    - it need to store information current position all of the non boundary particles it save information to this file every 10 steps of simulation. You shoulld remember that than more info you \r\nwant to store than bigger output file is. \r\n\r\nFor view result you should run simulation with key -l_from - it get positions from position_buffer.txt file and \r\ndraw evolution of system in time\r\n\r\n\r\nMaking videos\r\n-------------\r\nIf you run a simulation you may be interested in recording the graphical output. Making such videos is a bit tricky because they need to be speeded up, so far I have found the following two commands do a decent job (change folder names accordingly) after you have used a screen record program:\r\n\r\n```\r\n#If your video is in OGV  format (if you used recordmydesktop for instance), use the following script to convert to avi:\r\n\r\n#!/bin/bash\r\n # ogv to avi\r\n # Call this with multiple arguments\r\n # for example : ls *.{ogv,OGV} | xargs ogv2avi\r\n N=$#;\r\n echo \"Converting $N files !\"\r\n for ((i=0; i<=(N-1); i++))\r\n do\r\n echo \"converting\" $1\r\n filename=${1%.*}\r\n mencoder \"$1\" -ovc xvid -oac mp3lame -xvidencopts pass=1 -o $filename.avi\r\n shift 1\r\n done\r\n```\r\n\r\n```\r\n#make images from video\r\nffmpeg -i crawley_6.avi -r 0.05 -f image2 ~/Documents/tmp/output-%06d.jpg\r\n```\r\n\r\n```\r\n#re-encode into video\r\nffmpeg -r 100 -i output-%06d.jpg -r 100 -vb 60M speeded_worm.mp4\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}