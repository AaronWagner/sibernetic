{"name":"Sibernetic","tagline":"This is a C++ implementation of the Contractile SPH (Electrofluid) algorithm applied to C. elegans locomotion","body":"![Sibernetic](http://i.imgur.com/Hbsw6Zs.png)\r\n\r\nSibernetic is a fluid mechanics simulator developed for simulations of C. elegans in the [OpenWorm project](http://www.openworm.org) developed for the [OpenWorm](http://openworm.org) project by Andrey Palyanov, Sergey Khayrulin and Mike Vella as part of the [OpenWorm team](http://www.openworm.org/people.html). Sibernetic provides an implementation of the PCISPH contractile matter algorithm for simulating muscle tissue and is applies to C. elegans locomotion.\r\n\r\nWhen driven by [Hodgkin Huxley dynamics](https://en.wikipedia.org/wiki/Hodgkin%E2%80%93Huxley_model) contractile matter is called Electrofluid.\r\n\r\nSibernetic is primarily written in  C++ and OpenCL, it also provides a Python API.\r\n\r\nThere is a separate effort lead by [Giovanni Idili](https://github.com/gidili) and [Sergey Khayrulin](https://github.com/skhayrulin) to port this code to Java, as part of the [Geppetto simulation framework](https://github.com/openworm/OpenWorm/wiki/Geppetto--Overview). \r\n\r\nCompiling / running (Linux/mac)\r\n------------------------------\r\n\r\n**Linux**\r\n\r\nInstall OpenCL on Ubuntu. We suggest you initially go with [AMD OpenCL drivers](http://developer.amd.com/tools-and-sdks/heterogeneous-computing/amd-accelerated-parallel-processing-app-sdk/downloads/) as we have found these to be the most stable and complete. You can also try [Intel's drivers](http://develnoter.blogspot.co.uk/2012/05/installing-opencl-in-ubuntu-1204.html). This step often causes problems, contact the [openworm-discuss](https://groups.google.com/forum/#!forum/openworm-discuss) mailing list if you encounter issues. The AMD drivers include samples in /opt/AMDAPP/samples/opencl/bin which you can use to verify your OpenCL support is working.\r\n\r\nYou'll also need a variety of libraries. In ubuntu, install the dependencies with:\r\n\r\n```\r\nsudo apt-get install g++ python-dev freeglut3-dev nvidia-opencl-dev libglu1-mesa-dev libglew-dev python-numpy\r\n```\r\n\r\nNext, navigate to the `Release` folder and run:\r\n\r\n```\r\nmake clean\r\nmake all\r\n```\r\n\r\n**Mac**: stay in the top-level folder and run:\r\n\r\n```\r\nmake clean -f makefile.OSX\r\nmake all -f makefile.OSX\r\n```\r\n\r\nYou should see an output which looks something like this:\r\n\r\n```\r\nBuilding file: ../src/PyramidalSimulation.cpp\r\nInvoking: GCC C++ Compiler\r\n\r\n....\r\nmore stuff...\r\n....\r\n\r\nBuilding target: Smoothed-Particle-Hydrodynamics\r\nInvoking: GCC C++ Linker\r\ng++ -L/usr/lib -L/usr/lib/python2.7 -o \"Smoothed-Particle-Hydrodynamics\"  ./src/PyramidalSimulation.o ./src/main.o ./src/owHelper.o ./src/owOpenCLSolver.o ./src/owPhysicsFluidSimulator.o ./src/owWorldSimulation.o   -lOpenCL -lpython2.7 -lrt -lglut -lGL -lGLU\r\nFinished building target: Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nThen navigate to the top-level folder in the hierarchy (e.g `Smoothed-Particle-Hydrodynamics`) and set your `PYTHONPATH`:\r\n\r\n```\r\nexport PYTHONPATH=$PYTHONPATH:'./src'\r\n```\r\n\r\nFinally, to run, run the command:\r\n\r\n**Linux**:\r\n```\r\n./Release/Sibernetic\r\n```\r\n**Mac**:\r\n```\r\n./build/Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nYou may need to make `./Release/Smoothed-Particle-Hydrodynamics` executable like so:\r\n\r\n```\r\nchmod +x ./Release/Smoothed-Particle-Hydrodynamics\r\n```\r\n\r\nIf you do not run from the top-level folder you will see an error which looks something like this:\r\n\r\n```\r\nCompilation failed: \r\n\"/tmp/OCLQ1BaOw.cl\", line 8: catastrophic error: cannot open source file\r\n\"src//owOpenCLConstant.h\"\r\n#include \"src//owOpenCLConstant.h\"\r\n```\r\n\r\n\r\nWhat's inside\r\n-------------\r\n\r\nPhysical Algorithms:\r\n\r\n- PCI SPH - simulation incompressible liquid [1]\r\n- Simulation elastic matter\r\n- Simulation liquid-impermeable membranes\r\n- Boundary handling [2]\r\n- Surface tension [3]\r\n\r\nThere are two demo scenes generated for Sibernetic. The first one contains an elastic cube covered with liquid-impermeable membranes and liquid inside. The second one contains two elastic membranes attached to boundary (one of it has a liquid-impermeable membranes covering and another one hasn't such). \r\n\r\nThe second one contains two elastic membranes attached to a boundary (one of them has liquid-impermeable membranes covering them and the other one doesn't).\r\n\r\nTo switch between demos you need to press the 1 or 2 keys respectively. To pause simulation you may press space bar.\r\n\r\nReferences\r\n\r\n1. B. Solenthaler, Predictive-Corrective Incompressible SPH. ACM Transactions on Graphics (Proceedings of SIGGRAPH), 28(3), 2009. \r\n2. M. Ihmsen, N. Akinci, M. Gissler, M. Teschner, Boundary Handling and Adaptive Time-stepping for PCISPH Proc. VRIPHYS, Copenhagen, Denmark, pp. 79-88, Nov 11-12, 2010.\r\n3. M. Becker, M. Teschner. Weakly compressible SPH for free surface flows // Proceedings of the 2007 ACM SIGGRAPH/Eurographics symposium on Computer animation, pages 209-217.\r\n\r\nMain command options\r\n--------------\r\nTo start Sibernetic with argument print in command prompt next ./Release/Sibernetic -whatever\r\nAvailable options:\r\n```\r\n -g_no                 Run without graphics\r\n -l_to                 Save simulation results to disk.\r\n -l_from               Load simulation results from disk.\r\n -test                 Run some physical tests.\r\n -f <filename>         Load configuration from file ./configuration/<filename>.\r\n device=<device_type>  Trying to init OpenCL on device <type> it could be cpu or gpu \r\n                       default-ALL (it will try to init most powerful available device).\r\n timestep=<value>      Start simulation with time step = <value> in seconds.\r\n timelimit=<value>     Run simulation until <value> will be reached in seconds.\r\n leapfrog              Use for integration LeapFrog method\r\n -help                 Print this information on screen.\r\n```\r\n\r\nLeapFrog integration\r\n--------------\r\n[Leapfrog](https://en.wikipedia.org/wiki/Leapfrog_integration) is second order method insted of [Semi-implicid Euler](https://en.wikipedia.org/wiki/Semi-implicit_Euler_method) which we are using as default method for integration. For run simulation with Leapfro integration medhod print run command\r\n```\r\n./Release/Sibernetic leapfrog\r\n```\r\n\r\nRun simulation from configuration file\r\n--------------\r\nAll configuration is stored in ./configuration folder there are two demo configuration demo1 and demo2 (demo1 is using as default demonstarative configuration). You can switch between two demo configurations directly inside the working Sibernetic - just push button '1' or '2' respectively. For run your configuration put you're configuration file into configuration folder and run Sibernetic with key \r\n```\r\n./Release/Sibernetic -f <configuration_file_name>. \r\n```\r\nFor run worm body simulation you need run Siberntic with key \r\n```\r\n./Release/Sibernetic -f worm\r\n```\r\nit load worm body configuration and init and run pyhon module which is responsible for muscle signal updating. If you want work with worm body configuration generator you should change branch to WormBodySimultion.\r\n\r\nControl in graphical mode\r\n---------------\r\nIf you run Sibernetic with graphic you can work with scene rotate and scaling by mouse. Also you several control button is available:\r\n```\r\n'Space' - pause simulation \r\n's'     - save current configuration into file ./configuration/snapshot/configuration_default you can run this\r\nthan (./Release/Sibernetic -f /snapshot/configuration_default).\r\n'q' or 'Esc'     - quit the sibernetic\r\n'1'     - run demo1 configuration\r\n'2'     - run demo2 configuration\r\n```\r\n\r\nConfiguration file format\r\n---------------\r\nConfiguration file is consist from:\r\n```\r\nFirst 6 lines is spatial description of boundary box\r\nxmin\r\nxmax\r\nymin\r\nymax\r\nzmin\r\nzmax\r\n[position] - contains information about position of all particles e.g.\r\n1 0 0 1\r\n1 0 0 1\r\n...\r\n[velocity] - contains infomation about velocityes of all particles e.g.\r\n0 0 0 1\r\n0 0 0 1\r\n...\r\n[connection] - contains infomation about elastic connection of all elastic particles e.g.\r\n1\t1.58649939377\t1.1\t0.0\r\n7\t1.58649939377\t1.1\t0.0\r\n...\r\n[membranes] - contains infomation about membranes e.g.\r\n0\t1\t7\r\n7\t8\t1\r\n...\r\n[particleMemIndex] - contains infomation about in which membranes elastic particle is includes e.g.\r\n0\r\n144\r\n288\r\n-1\r\n...\r\n```\r\n\r\n\r\nSaving to disk\r\n--------------\r\nYou can run Sibernetic on gpu for this you should start Sibernetic with key device=gpu.\r\n\r\nYou may wish to save simulations to disk rather than visualise them (**WARNING**: This is buggy)\r\n\r\nFor record configuraton into file you need to run simulation with key -l_to - it create 3 new files \r\nat the folder ./buffers:\r\n- connection_buffers.txt - it need to store information about conection among of elastic partciles\r\n- membranes_buffer.txt   - it need to store information about membranes \r\n- position_buffer.txt    - it need to store information current position all of the non boundary particles it save information to this file every 10 steps of simulation. You shoulld remember that than more info you \r\nwant to store than bigger output file is. \r\n\r\nFor view result you should run simulation with key -l_from - it get positions from position_buffer.txt file and \r\ndraw evolution of system in time\r\n\r\n\r\nMaking videos (*nix)\r\n--------------------\r\nIf you run a simulation you may be interested in recording the graphical output. Making such videos is a bit tricky because they need to be speeded up, so far I have found the following two commands do a decent job (change folder names accordingly) after you have used a screen record program:\r\n\r\n```\r\n#If your video is in OGV  format (if you used recordmydesktop for instance), use the following script to convert to avi:\r\n\r\n#!/bin/bash\r\n # ogv to avi\r\n # Call this with multiple arguments\r\n # for example : ls *.{ogv,OGV} | xargs ogv2avi\r\n N=$#;\r\n echo \"Converting $N files !\"\r\n for ((i=0; i<=(N-1); i++))\r\n do\r\n echo \"converting\" $1\r\n filename=${1%.*}\r\n mencoder \"$1\" -ovc xvid -oac mp3lame -xvidencopts pass=1 -o $filename.avi\r\n shift 1\r\n done\r\n```\r\n\r\n```\r\n#make images from video\r\nffmpeg -i crawley_6.avi -r 0.05 -f image2 ~/Documents/tmp/output-%06d.jpg\r\n```\r\n\r\n```\r\n#re-encode into video\r\nffmpeg -r 100 -i output-%06d.jpg -r 100 -vb 60M speeded_worm.mp4\r\n```\r\nTroubleshooting\r\n--------------------\r\nIf you have any question or have a problem with runing sibernetic please contact with us\r\nemail me on skhayrulin@openworm.org or info@openworm.org. Or you can create the [issues on github](https://github.com/openworm/sibernetic/issues)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}